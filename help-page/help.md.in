% Alpine Term

This is a terminal emulator and a Linux environment application using
the [QEMU](https://qemu.org) to run the [Alpine Linux](https://alpinelinux.org)
distribution.

*Inspired by [Termux](https://github.com/termux/termux-app) and
[UserLAnd](https://github.com/CypherpunkArmory/UserLAnd) applications.*

***

## User's Guide

Table of contents:

 - [User interface](#user-interface)
   - [Context menu](#context-menu)
   - [Navigation drawer](#navigation-drawer)
   - [Notification](#notification)
   - [Extra keys row](#extra-keys-row)
   - [Text input view](#text-input-view)
 - [Getting started](#getting-started)
   - [Terminal](#terminal)
   - [Touch keyboard shortcuts](#touch-keyboard-shortcuts)
   - [Hardware keyboard shortcuts](#hardware-keyboard-shortcuts)
 - [Usage tips](#usage-tips)
   - [Booting Alpine Linux Live CD](#booting-alpine-linux-live-cd)
   - [Connecting to host](#connecting-to-host)
   - [Forwarding ports](#forwarding-ports)
   - [Increasing size of root partition](#increasing-size-of-root-partition)
   - [Pausing the VM](#pausing-the-vm)
   - [Saving and restoring the VM state](#saving-and-restoring-the-vm-state)
   - [Sharing files between host and VM](#sharing-files-between-host-and-vm)
   - [Using the X Window System](#using-the-x-window-system)

Additional resources for reading:

 - [Alpine Linux Wiki](https://wiki.alpinelinux.org)

   Contains the all documentation about Alpine Linux.

 - [Advanced Bash-Scripting Guide](doc/bash-advanced.html)

   Bash is not available by default, but this page is useful if you are new
   to shell scripting.

 - [mksh(1)](doc/mksh.html)

   Manual page for mksh which is used as default system shell.

 - [QEMU monitor reference](doc/qemu-doc.html#pcsys_005fmonitor)

   Information about commands used to control QEMU state. Some commands are
   not available for the QEMU build running inside the Alpine Term.

***

### User interface

Application interface is simple and besides the terminal it consists
of five functional elements such as [context menu](#context-menu),
[navigation drawer](#navigation-drawer), [notification](#notification),
[extra keys row](#extra-keys-row) and [text input view](#text-input-view).

#### Context menu

The context menu can be shown by long pressing anywhere on the
terminal. It provides menu entries for:

 - Copying or pasting text from clipboard.
 - Showing this help page.
 - Opening URL selector dialog.
 - Sharing text from the terminal to other apps.
 - Resetting the terminal state if it got messed up.
 - Selecting a color scheme of the terminal.
 - Checkbox to control whether back key should send ESC.
 - Checkbox to control whether bell characters should be ignored.

#### Navigation drawer

The navigation drawer is revealed by swiping inwards from the left
part of screen.

<span style="display:block;text-align:center">
  <img alt="Navigation drawer screenshot" src="img/app_drawer.png" style="width:90%;max-width:700px;">
</span>

It contains few additional elements:

 1. The list of sessions: click on a specific session to open it in the terminal.
 2. The button to toggle visibility of a touch keyboard.
    <br>Long press will toggle the [extra keys row](#extra-keys-row) (3).

#### Notification

<span style="display:block;text-align:center">
  <img alt="Notification screenshot" src="img/app_notification.png" style="width:90%;max-width:700px;">
</span>

Alpine Term displays the notification while it is running. It can be expanded
by a pinch-zooming or a single-finger glide gestures to expose some actions:

 1. Immediately exit the application.
 2. Start a wake lock to prevent device's CPU going into sleep mode.

Clicking on the notification will open a current terminal session.

#### Extra keys row

<span style="display:block;text-align:center">
  <img alt="Extra keys row screenshot" src="img/extra_keys_row.png" style="width:90%;max-width:700px;">
</span>

The extra keys row provide a quick access to some buttons frequently used
in shell sessions. It can be toggled by either a long press on the keyboard
button located in the [navigation drawer](#navigation-drawer) or by
**Volume Up+Q** and **Volume Up+K** key combinations.

Certain buttons expose alternate keys by swiping them up. Particularly:

 - `-` will show a key for `_`
 - `/` will show a key for `\`
 - `|` will show a key for `&`
 - `>` will show a key for `<`

#### Text input view

<span style="display:block;text-align:center">
  <img alt="Text input view screenshot" src="img/alt_text_input.png" style="width:90%;max-width:700px;">
</span>

Terminal view does not support advanced features of the touch keyboards
like a predictive input or swipe typing. To solve this, Alpine Term has
the text input view where all these features work correctly. Just enter
your text into that field and it will get pasted to the terminal.

You can access this text input view by swiping left the [extra keys row](#extra-keys-row).

***

### Getting started
#### Terminal

Application emulates a subset of the X Window System (`xterm`) terminal.
Its capabilities should be enough for interacting with majority of the
available command line programs.

However, since the terminal is used only as frontend for serial lines
(ttyS0-ttyS3) exposed by QEMU, it does not support automatic window
resizing. So, after changing font size you will need to execute the
command 'resize', otherwise text may get messed.

<span style="display:block;text-align:center">
  <img alt="QEMU session screenshot" src="img/qemu_session.png" style="width:90%;max-width:700px;">
</span>

Terminal is sensitive to taps and gestures. For example, pinch-zooming
will change the font size and short tap will act as a mouse click. Long
tap will toggle a text selection and the [context menu](#context-menu).

Alpine Term provides a fixed amount of persistent non-closeable terminal
sessions, each of them has its own purpose.

The first session is the QEMU monitor which gives you full control over
QEMU's internal state.

<span style="display:block;text-align:center">
  <img alt="QEMU monitor screenshot" src="img/qemu_monitor.png" style="width:90%;max-width:700px;">
</span>

Other four sessions are attached serial lines providing access to the
operating system.

#### Touch keyboard shortcuts

**Volume Down** button emulates **Ctrl** key which is frequently used
with others to request special action from command line tools. Common
key combinations are:


 - **Ctrl+A** → Move cursor to the beginning of line
 - **Ctrl+C** → Interrupt the current process with SIGINT
 - **Ctrl+D** → Send end-of-file to the standard input
 - **Ctrl+E** → Move cursor to the end of line
 - **Ctrl+K** → Delete text from cursor to the end of line
 - **Ctrl+L** → Clear the terminal
 - **Ctrl+Z** → Suspend the current process with SIGTSTP

**Volume Up** key is used to to produce certain input on the following
combinations:

 - **Volume Up+.** → Ctrl+\\ (SIGQUIT)
 - **Volume Up+1** → F1 (and **Volume Up+2** → F2, etc)
 - **Volume Up+0** → F10
 - **Volume Up+A** → Left arrow key
 - **Volume Up+B** → Alt+B, back a word when using readline
 - **Volume Up+D** → Right arrow key
 - **Volume Up+E** → Escape key
 - **Volume Up+F** → Alt+F, forward a word when using readline
 - **Volume Up+H** → ~ (the tilde character)
 - **Volume Up+K** → Alias for **Volume Up+Q**
 - **Volume Up+L** → | (the pipe character)
 - **Volume Up+N** → Page Down
 - **Volume Up+P** → Page Up
 - **Volume Up+Q** → Toggle extra keys row
 - **Volume Up+S** → Down arrow key
 - **Volume Up+T** → Tab key
 - **Volume Up+U** → _ (the underscore character)
 - **Volume Up+V** → Show the volume control
 - **Volume Up+W** → Up arrow key
 - **Volume Up+X** → Alt+X

#### Hardware keyboard shortcuts

These keys in combination with **Ctrl+Alt** will trigger certain
actions of Alpine Term when using a hardware keyboard:

 - **+/-** → Adjust text size
 - **1-5** → Go to the session with specified number
 - **M** → Show the [context menu](#context-menu)
 - **N** → Switch to the next session
 - **P** → Switch to the previous session
 - **U** → Open URL selector
 - **V** → Paste clipboard
 - **Left arrow** → Close drawer
 - **Right arrow** → Open drawer
 - **Down arrow** → Alias for **N**
 - **Up arrow** → Alias for **P**

***

### Usage tips
#### Booting Alpine Linux Live CD

You can boot from Live CD by choosing a DVD-ROM device from the boot menu
which can be opened by tapping 'ESC' immediately when BIOS prompt appeared.

<span style="display:block;text-align:center">
  <img alt="BIOS menu screenshot" src="img/bios_menu.png" style="width:90%;max-width:700px;">
</span>

When you successfully booted the Alpine Linux Live CD, you will need to
perform a basic system configuration by executing command 'setup-alpine'.
Otherwise you will not be able to install packages and available set of
utilities will be quite small.

#### Connecting to host

You can access network services running on the host by connecting to IP
`10.0.2.2`.

For example if you have OpenSSH daemon running in [Termux](https://github.com/termux/termux-app),
you can simply execute
```
ssh -p 8022 10.0.2.2
```
in the VM and obtain shell access to the host.

<span style="display:block;text-align:center">
  <img alt="Termux access screenshot" src="img/termux_ssh.png" style="width:90%;max-width:700px;">
</span>

#### Forwarding ports

To expose network services running inside the VM, open the QEMU monitor
session (the top one in [drawer](#navigation-drawer)) and execute a
command having the next format:
```
hostfwd_add ${proto}::${ext_port}-:${int_port}
```
where:

 - ${proto} is either 'tcp' or 'udp'.
 - ${ext_port} is a port that should be opened on host. Must be higher
   than 1024.
 - ${int_port} is a VM port being forwarded.

So, valid command for SSH will be:
```
hostfwd_add tcp::10022-:22
```
\- all connections to the host's port 10022 will be redirected to the
port 22 in the VM.

Note that port redirects are removed when QEMU is being powered off.
They also can be removed manually with 'hostfwd_remove'. For example,
the SSH port forwarding configured above can be disabled with:
```
hostfwd_remove tcp::10022
```

#### Increasing size of root partition

Alpine Term provides the disk image with maximal size of 128 GB. However
the root partition has size of 4 GB to prevent the growing disk image from
consuming all device's memory. You can extend the root partition with 'fdisk'
as shown in this guide.

Steps that you need to perform:

 1. Determine a start sector. For image used with Alpine Term it is **63**.
 2. Determine initial size of the partition. Image default is **4096M**.
 3. Delete the partition **sda1**.
 4. Create a new partition. You will be prompted for parameters.
    - Set partition type to **primary**.
    - Enter value **1** as partition number.
    - Enter value **63** (same as in step 1) as first sector.
    - For last sector enter desired size of the new partition (for example **+8G**).
      <br>Size should not be smaller than partition's default (see step 2).
 5. Ensure that boot flag is turned on for the root partition.
 6. Write changes.

A transcript of 'fdisk' session for increasing root device size to 8 GB:

~~~~ {#fdisk-transcript .numberLines startFrom="1"}
~ # fdisk /dev/sda

The number of cylinders for this disk is set to 190650.
There is nothing wrong with that, but this is larger than 1024,
and could in certain setups cause problems with:
1) software that runs at boot time (e.g., old versions of LILO)
2) booting and partitioning software from other OSs
   (e.g., DOS FDISK, OS/2 FDISK)

Command (m for help): p
Disk /dev/sda: 128 GB, 137438953472 bytes, 268435456 sectors
190650 cylinders, 44 heads, 32 sectors/track
Units: sectors of 1 * 512 = 512 bytes

Device  Boot StartCHS    EndCHS        StartLBA     EndLBA    Sectors  Size Id Type
/dev/sda1 *  0,1,1       522,43,32           63    8388670    8388608 4096M 83 Linux

Command (m for help): d
Selected partition 1

Command (m for help): n
Partition type
   p   primary partition (1-4)
   e   extended
p
Partition number (1-4): 1
First sector (32-268435455, default 32): 63
Last sector or +size{,K,M,G,T} (63-268435455, default 268435455): +8G

Command (m for help): a
Partition number (1-4): 1

Command (m for help): p
Disk /dev/sda: 128 GB, 137438953472 bytes, 268435456 sectors
190650 cylinders, 44 heads, 32 sectors/track
Units: sectors of 1 * 512 = 512 bytes

Device  Boot StartCHS    EndCHS        StartLBA     EndLBA    Sectors  Size Id Type
/dev/sda1 *  0,1,32      1023,43,32          63   16777278   16777216 8192M 83 Linux

Command (m for help): w
The partition table has been altered.
Calling ioctl() to re-read partition table
fdisk: WARNING: rereading partition table failed, kernel still uses old table: Resource busy
~~~~

After finishing with fdisk you need to reboot. Then you will be able
to resize file system to the partition's maximum (requires package
'e2fsprogs-extra'):
```
resize2fs /dev/sda1
```
EXT4 file system supports online resizing and reboot is not needed
at this step.

#### Pausing the VM

Stopping or resuming the VM execution is very simple. Just open the
QEMU monitor session (the top one in [drawer](#navigation-drawer))
and execute command `stop` - for pausing or `cont` - for resuming
execution.

Pausing is useful if you want to keep Alpine Term running but
have QEMU being idle, for example to prevent battery consumption
when application is not used.

#### Saving and restoring the VM state

With VM snapshots you will be able to rollback changes made to the
disk image. This feature is useful if you are experimenting with
packages or configuration and do not want to reset the Alpine Term
application in case if something went wrong.

Highly advisable to make a snapshot immediately after the first
login.

<span style="display:block;text-align:center">
  <img alt="VM snapshots screenshot" src="img/vm_snapshots.png" style="width:90%;max-width:700px;">
</span>

Before making snapshot, ensure that host storage is not mounted:
```
umount /mnt/shared
```
\- that is if you have not changed the default mount point in the
`/etc/fstab`. Just QEMU does not allow saving state with VirtFS
mounts, so this step is essential.

To save the virtual machine state, execute the next command in the
monitor session:
```
savevm your_snapshot_name
```

Created snapshots may be loaded at any time with the next command:
```
loadvm your_snapshot_name
```

Note that both commands will freeze console during operation. Also
each snapshot consumes certain amount of space on host internal
storage.

#### Sharing files between host and VM

Alpine Term provides the way for storing files on host storage. QEMU
is configured to share the private directory of Alpine Term application
with a guest operating system. Host directory is *usually* located at
```
/storage/emulated/0/Android/data/alpine.term
```
and is easily accessible from a file manager application.

By default, the VM mounts this directory as `/mnt/shared` but you may
edit the `/etc/fstab` to mount it under a different path.

Android applies certain restrictions on the shared storage:

 - File ownership cannot be modified.
 - File permissions cannot be modified.
 - Binary execution is not allowed.
 - Special files like symlinks are not supported.

**Warning**: if you want to uninstall the Alpine Term, do not forget
to move files from the host's shared directory to a different place.
Otherwise all its data will be lost.

#### Using the X Window System

You can run graphical programs in the VM but with a few restrictions:

 - Performance is very low. Some programs may load few minutes before opening.
 - Graphical output is performed through QEMU's the embedded VNC server.
 - No VNC TLS encryption support in the current QEMU build.
 - VNC server accepts only the US keyboard layout.
 - You need a third-party program for connecting to the VNC server.

##### Setting up VNC

The VNC server is disabled by default. It can be enabled in the monitor
session (the top one in [drawer](#navigation-drawer)).
```
change vnc 127.0.0.1:1
```
The command shown above will start the VNC server on localhost and
port 5901 (VNC port is determined from `5900 + display number`).

Optionally you can enable a password authentication with these
commands:
```
change vnc 127.0.0.1:1,password
change vnc password
```
**Warning**: password length is limited to 8 characters by the
VNC protocol.

##### Setting up Xorg

Run a script provided by Alpine Linux to setup Xorg installation:
```
setup-xorg-base
```
Then you may install any additional software like window managers
or utilities. For example:
```
apk add fluxbox gimp
```
Certain packages (like GIMP) require the TTF fonts which you may need
to install manually:
```
apk add ttf-dejavu
```

When you are ready to launch your graphical environment, execute:
```
startx
```
Then check output in VNC client. If above command failed, you need
to inspect a log file of the X server.

<span style="display:block;text-align:center">
  <img alt="X11 environment screenshot" src="img/x11_fluxbox_gimp.png" style="width:90%;max-width:700px;">
</span>

##### Common Xorg & VNC issues:

1. Program may print an error about display opening failure.
   Should be solved by this command:
   ```
   export DISPLAY=:0
   ```
   If program still fails, make sure that Xorg is running.

2. When launching GIMP or other program using D-Bus, it may complain
   about missing machine-id. You can generate it with this command:
   ```
   dbus-uuidgen > /var/lib/dbus/machine-id
   ```

3. If your VNC client application closes immediately after opening
   connection or tells that protocol is invalid:

   - Ensure that VNC server is running.
   - Ensure that you are connecting to the right port.
   - Try a different VNC client.
   - Try to reboot and connect with VNC client before launching Xorg.

***

<p style="text-align:center;"><font size="1dp"><i>Alpine Term by Leonid Plyushch (@xeffyr)</i></font></p>
