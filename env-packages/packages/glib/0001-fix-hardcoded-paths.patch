diff -uNr glib-2.58.3/gio/gunixmounts.c glib-2.58.3.mod/gio/gunixmounts.c
--- glib-2.58.3/gio/gunixmounts.c	2019-01-21 15:38:50.000000000 +0200
+++ glib-2.58.3.mod/gio/gunixmounts.c	2019-11-19 22:49:12.490139306 +0200
@@ -2955,7 +2955,7 @@
           /* see if device with similar major:minor as /dev/root is mention
            * in /etc/mtab (it usually is) 
            */
-          f = fopen ("/etc/mtab", "r");
+          f = fopen ("/proc/mounts", "r");
           if (f != NULL) 
             {
 	      struct mntent *entp;
diff -uNr glib-2.58.3/gio/xdgmime/xdgmime.c glib-2.58.3.mod/gio/xdgmime/xdgmime.c
--- glib-2.58.3/gio/xdgmime/xdgmime.c	2019-01-21 15:38:50.000000000 +0200
+++ glib-2.58.3.mod/gio/xdgmime/xdgmime.c	2019-11-20 13:06:39.454839568 +0200
@@ -217,6 +217,26 @@
   return FALSE; /* Keep processing */
 }
 
+
+#ifndef ANDROID_PREPEND_PREFIX
+#define ANDROID_PREPEND_PREFIX 1
+int  asprintf(char** __s_ptr, const char* __fmt, ...);
+char* getenv(const char* __name);
+static __inline__ char *__prepend_prefix(char *path) {
+  char *_new_path;
+  char *_env_prefix = getenv("PREFIX");
+
+  if (_env_prefix) {
+    asprintf(&_new_path, "%s%s", _env_prefix, path);
+    return _new_path;
+  } else {
+    asprintf(&_new_path, "%s%s", "@TERMUX_PREFIX@", path);
+    return _new_path;
+  }
+}
+#endif
+
+
 /* Runs a command on all the directories in the search path */
 static void
 xdg_run_command_on_dirs (XdgDirectoryFunc  func,
@@ -253,10 +273,7 @@
 	}
     }
 
-  xdg_data_dirs = getenv ("XDG_DATA_DIRS");
-  if (xdg_data_dirs == NULL)
-    xdg_data_dirs = "/usr/local/share/:/usr/share/";
-
+  xdg_data_dirs = __prepend_prefix("/share/");
   ptr = xdg_data_dirs;
 
   while (*ptr != '\000')
@@ -291,6 +308,7 @@
 
       ptr = end_ptr;
     }
+  free(xdg_data_dirs);
 }
 
 /* Checks file_path to make sure it has the same mtime as last time it was
diff -uNr glib-2.58.3/glib/gcharset.c glib-2.58.3.mod/glib/gcharset.c
--- glib-2.58.3/glib/gcharset.c	2019-01-21 15:38:50.000000000 +0200
+++ glib-2.58.3.mod/glib/gcharset.c	2019-11-19 22:44:33.825676102 +0200
@@ -287,6 +287,26 @@
 
 #endif
 
+
+#ifndef ANDROID_PREPEND_PREFIX
+#define ANDROID_PREPEND_PREFIX 1
+int  asprintf(char** __s_ptr, const char* __fmt, ...);
+char* getenv(const char* __name);
+static __inline__ char *__prepend_prefix(char *path) {
+  char *_new_path;
+  char *_env_prefix = getenv("PREFIX");
+
+  if (_env_prefix) {
+    asprintf(&_new_path, "%s%s", _env_prefix, path);
+    return _new_path;
+  } else {
+    asprintf(&_new_path, "%s%s", "@TERMUX_PREFIX@", path);
+    return _new_path;
+  }
+}
+#endif
+
+
 static char *
 unalias_lang (char *lang)
 {
@@ -298,7 +318,9 @@
   if (g_once_init_enter (&alias_table))
     {
       GHashTable *table = g_hash_table_new (g_str_hash, g_str_equal);
-      read_aliases ("/usr/share/locale/locale.alias", table);
+      char *locale_alias_path = __prepend_prefix("/share/locale/locale.alias");
+      read_aliases (locale_alias_path, table);
+      free(locale_alias_path);
       g_once_init_leave (&alias_table, table);
     }
 
diff -uNr glib-2.58.3/glib/gspawn.c glib-2.58.3.mod/glib/gspawn.c
--- glib-2.58.3/glib/gspawn.c	2019-01-21 15:38:50.000000000 +0200
+++ glib-2.58.3.mod/glib/gspawn.c	2019-11-19 22:41:18.551563428 +0200
@@ -2059,7 +2059,7 @@
 
     new_argv = g_new0 (gchar*, argc + 2); /* /bin/sh and NULL */
     
-    new_argv[0] = (char *) "/bin/sh";
+    new_argv[0] = (char *) "/system/bin/sh";
     new_argv[1] = (char *) file;
     while (argc > 0)
       {
@@ -2138,7 +2138,7 @@
            * what to search if PATH is unset. POSIX may, dunno.
            */
           
-          path = "/bin:/usr/bin:.";
+          path = "/system/bin";
 	}
 
       len = strlen (file) + 1;
diff -uNr glib-2.58.3/glib/gutils.c glib-2.58.3.mod/glib/gutils.c
--- glib-2.58.3/glib/gutils.c	2019-01-21 15:38:50.000000000 +0200
+++ glib-2.58.3.mod/glib/gutils.c	2019-11-20 13:12:36.526387328 +0200
@@ -302,6 +302,26 @@
 
 #endif
 
+
+#ifndef ANDROID_PREPEND_PREFIX
+#define ANDROID_PREPEND_PREFIX 1
+int  asprintf(char** __s_ptr, const char* __fmt, ...);
+char* getenv(const char* __name);
+static __inline__ char *__prepend_prefix(char *path) {
+  char *_new_path;
+  char *_env_prefix = getenv("PREFIX");
+
+  if (_env_prefix) {
+    asprintf(&_new_path, "%s%s", _env_prefix, path);
+    return _new_path;
+  } else {
+    asprintf(&_new_path, "%s%s", "@TERMUX_PREFIX@", path);
+    return _new_path;
+  }
+}
+#endif
+
+
 /**
  * g_find_program_in_path:
  * @program: (type filename): a program name in the GLib file name encoding
@@ -381,7 +401,7 @@
        * what to search if PATH is unset. POSIX may, dunno.
        */
       
-      path = "/bin:/usr/bin:.";
+      path = "/system/bin";
     }
 #else
   n = GetModuleFileNameW (NULL, wfilename, MAXPATHLEN);
@@ -2039,19 +2059,10 @@
 
   if (!g_system_data_dirs)
     {
-      gchar *data_dirs = (gchar *) g_getenv ("XDG_DATA_DIRS");
-
-#ifndef G_OS_WIN32
-      if (!data_dirs || !data_dirs[0])
-          data_dirs = "/usr/local/share/:/usr/share/";
+      gchar *data_dirs = __prepend_prefix("/share/");
 
       data_dir_vector = g_strsplit (data_dirs, G_SEARCHPATH_SEPARATOR_S, 0);
-#else
-      if (!data_dirs || !data_dirs[0])
-        data_dir_vector = g_strdupv ((gchar **) g_win32_get_system_data_dirs_for_module_real (NULL));
-      else
-        data_dir_vector = g_strsplit (data_dirs, G_SEARCHPATH_SEPARATOR_S, 0);
-#endif
+      free(data_dirs);
 
       g_system_data_dirs = data_dir_vector;
     }
@@ -2099,30 +2110,10 @@
 
   if (!g_system_config_dirs)
     {
-      const gchar *conf_dirs = g_getenv ("XDG_CONFIG_DIRS");
-#ifdef G_OS_WIN32
-      if (conf_dirs)
-	{
-	  conf_dir_vector = g_strsplit (conf_dirs, G_SEARCHPATH_SEPARATOR_S, 0);
-	}
-      else
-	{
-	  gchar *special_conf_dirs = get_special_folder (CSIDL_COMMON_APPDATA);
-
-	  if (special_conf_dirs)
-	    conf_dir_vector = g_strsplit (special_conf_dirs, G_SEARCHPATH_SEPARATOR_S, 0);
-	  else
-	    /* Return empty list */
-	    conf_dir_vector = g_strsplit ("", G_SEARCHPATH_SEPARATOR_S, 0);
-
-	  g_free (special_conf_dirs);
-	}
-#else
-      if (!conf_dirs || !conf_dirs[0])
-          conf_dirs = "/etc/xdg";
+      const gchar *conf_dirs = __prepend_prefix("/etc/xdg");
 
       conf_dir_vector = g_strsplit (conf_dirs, G_SEARCHPATH_SEPARATOR_S, 0);
-#endif
+      free(conf_dirs);
 
       g_system_config_dirs = conf_dir_vector;
     }
